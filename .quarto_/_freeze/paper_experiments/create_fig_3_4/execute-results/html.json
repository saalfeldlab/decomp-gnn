{
  "hash": "e76360b7154a0f62f5b29a8832dfbbfc",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Training GNN on attraction-repulsion (16 particle types)\nauthor: CÃ©dric Allier, Michael Innerberger, Stephan Saalfeld\ncategories:\n  - Particles\nexecute:\n  echo: false\nimage: \"create_fig_3_4_files/figure-html/cell-12-output-1.png\"\n---\n\n\n\n\nThis script creates the fourth column of Figure 3.\nA GNN learns the motion rules of an attraction-repulsion system.\nThe simulation used to train the GNN consists of 4800 particles of three different types.\nThe particles interact with each other according to 16 different attraction-repulsion laws.\n\n\n\nFirst, we load the configuration file and set the device.\n\n::: {#b5993b59 .cell execution_count=2}\n``` {.python .cell-code}\nconfig_file = 'arbitrary_16'\nfigure_id = '3_4'\nconfig = ParticleGraphConfig.from_yaml(f'./config/{config_file}.yaml')\ndevice = set_device(\"auto\")\n```\n:::\n\n\nThe following model is used to simulate the attraction-repulsion system with PyTorch Geometric.\n\n::: {#dbae968f .cell execution_count=3}\n``` {.python .cell-code}\nclass AttractionRepulsionModel(pyg.nn.MessagePassing):\n    \"\"\"\n    Compute the speed of particles as a function of their relative position according to an attraction-repulsion law.\n    The latter is defined by four parameters p = (p1, p2, p3, p4) and a parameter sigma.\n\n    See https://github.com/gpeyre/numerical-tours/blob/master/python/ml_10_particle_system.ipynb\n    \"\"\"\n\n    def __init__(self, p, sigma, bc_dpos, dimension=2):\n        super(AttractionRepulsionModel, self).__init__(aggr='mean')\n\n        self.p = p\n        self.sigma = sigma\n        self.bc_dpos = bc_dpos\n        self.dimension = dimension\n\n    def forward(self, data: Data):\n        x, edge_index = data.x, data.edge_index\n\n        edge_index, _ = pyg_utils.remove_self_loops(edge_index)\n        particle_type = to_numpy(x[:, 1 + 2 * self.dimension])\n        parameters = self.p[particle_type,:]\n        d_pos = self.propagate(edge_index, pos=x[:, 1:self.dimension + 1], parameters=parameters)\n        return d_pos\n\n\n    def message(self, pos_i, pos_j, parameters_i):\n\n        relative_position = self.bc_dpos(pos_j - pos_i)\n        distance_squared = torch.sum(relative_position ** 2, dim=1)  # squared distance\n        f = (parameters_i[:, 0] * torch.exp(-distance_squared ** parameters_i[:, 1] / (2 * self.sigma ** 2))\n             - parameters_i[:, 2] * torch.exp(-distance_squared ** parameters_i[:, 3] / (2 * self.sigma ** 2)))\n        velocity = f[:, None] * relative_position\n\n        return velocity\n\n\ndef bc_pos(x):\n    return torch.remainder(x, 1.0)\n\n\ndef bc_dpos(x):\n    return torch.remainder(x - 0.5, 1.0) - 0.5\n```\n:::\n\n\nThe training data is generated with the above Pytorch Geometric model\n\n::: {#9a000ae0 .cell execution_count=4}\n``` {.python .cell-code}\np = torch.squeeze(torch.tensor(config.simulation.params))\nsigma = config.simulation.sigma\nmodel = AttractionRepulsionModel(\n    p=p,\n    sigma=sigma,\n    bc_dpos=bc_dpos,\n    dimension=config.simulation.dimension\n)\n\ngenerate_kwargs = dict(device=device, visualize=True, run_vizualized=0, style='color', alpha=1, erase=True, save=True, step=10)\ntrain_kwargs = dict(device=device, erase=True)\ntest_kwargs = dict(device=device, visualize=True, style='color', verbose=False, best_model='20', run=0, step=1, save_velocity=True)\n\ndata_generate_particles(config, model, bc_pos, bc_dpos, **generate_kwargs)\n```\n:::\n\n\nThe GNN model (see src/ParticleGraph/models/Interaction_Particle.py) is trained and tested.\n\nSince we ship the trained model with the repository, this step can be skipped if desired.\n\n::: {#8180a76d .cell execution_count=5}\n``` {.python .cell-code}\nif not os.path.exists(f'log/try_{config_file}'):\n    data_train(config, config_file, **train_kwargs)\n```\n:::\n\n\nThe model that has been trained in the previous step is used to generate the rollouts.\nThe rollout visualization can be found in `paper_experiments/log/try_arbitrary_16/tmp_recons`.\n\n::: {#7361b559 .cell execution_count=6}\n``` {.python .cell-code}\ndata_test(config, config_file, **test_kwargs)\n```\n:::\n\n\nFinally, we generate the figures that are shown in Figure 3.\n\n::: {#bec84945 .cell execution_count=7}\n\n::: {.cell-output .cell-output-stdout}\n```\nlog_dir: ./log/try_arbitrary_16\nGNN trained with simulation PDE_A (16 types), with cluster method: distance_plot   threshold: 0.01\nload data ...\nvnorm:2.39e-03,  ynorm:2.40e-03\nnetwork: ./log/try_arbitrary_16/models/best_model_with_1_graphs_20.pt\ninteraction functions ...\nUMAP reduction ...\ndone ...\nClustering computation time is 0.13387036323547363 seconds.\n0.9997916666666666 16\nresult accuracy: 1.0    n_clusters: 16    obtained with  method: distance_plot   threshold: 0.01\ninteraction functions ...\nUMAP reduction ...\ndone ...\nClustering computation time is 0.13454174995422363 seconds.\n0.9991666666666666 20\nresult accuracy: 1.0    n_clusters: 20    obtained with  method: distance_embedding   threshold: 0.01\nall function RMS error: 9.2e-04+/-8.2e-04\n \n \n \n \n```\n:::\n:::\n\n\n::: {#a608a5c4 .cell execution_count=8}\n\n::: {.cell-output .cell-output-display}\n![Initial configuration of the test training dataset. There are 4800 particles. Colors indicate the particle types.](create_fig_3_4_files/figure-html/cell-9-output-1.png){width=470 height=470}\n:::\n:::\n\n\n::: {#c33c695f .cell execution_count=9}\n\n::: {.cell-output .cell-output-display}\n![Final configuration at frame 500](create_fig_3_4_files/figure-html/cell-10-output-1.png){width=470 height=470}\n:::\n:::\n\n\n::: {#b55b431b .cell execution_count=10}\n\n::: {.cell-output .cell-output-display}\n![Learned latent vectors (x4800)](create_fig_3_4_files/figure-html/cell-11-output-1.png){width=470 height=470}\n:::\n:::\n\n\n::: {#85460927 .cell execution_count=11}\n\n::: {.cell-output .cell-output-display}\n![Learned interaction functions (x16)](create_fig_3_4_files/figure-html/cell-12-output-1.png){width=470 height=470}\n:::\n:::\n\n\n::: {#ce7ff2b9 .cell execution_count=12}\n\n::: {.cell-output .cell-output-display}\n![GNN rollout inference at frame 500](create_fig_3_4_files/figure-html/cell-13-output-1.png){width=470 height=470}\n:::\n:::\n\n\n",
    "supporting": [
      "create_fig_3_4_files"
    ],
    "filters": [],
    "includes": {}
  }
}