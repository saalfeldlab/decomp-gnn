{
  "hash": "ee8bf39e05edde39878728b944e98dc1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Signaling system with 998 nodes\nauthor: CÃ©dric Allier, Michael Innerberger, Stephan Saalfeld\ncategories:\n  - Particles\nexecute:\n  echo: false\nimage: \"create_fig_2_7_files/figure-html/cell-10-output-1.png\"\n---\n\n\n\n\nThis script creates the seventh column of paper's Figure 2.\nSimulation of a signaling network, 986 nodes, 17,865 edges, 2 types of nodes.\nNote 100 of datasets are generated to test training with multiple trials.\n\n\n\nFirst, we load the configuration file and set the device.\n\n::: {#3c756a97 .cell execution_count=2}\n``` {.python .cell-code}\nconfig_file = 'signal_N_100_2'\nconfig = ParticleGraphConfig.from_yaml(f'./config/{config_file}.yaml')\ndevice = set_device(\"auto\")\n```\n:::\n\n\nThe following model is used to simulate the signaling network with PyTorch Geometric.\n\n::: {#39fd045e .cell execution_count=3}\n``` {.python .cell-code}\nclass SignalingNetwork(pyg.nn.MessagePassing):\n    \"\"\"Interaction Network as proposed in this paper:\n    https://proceedings.neurips.cc/paper/2016/hash/3147da8ab4a0437c15ef51a5cc7f2dc4-Abstract.html\"\"\"\n\n    \"\"\"\n\n    Inputs\n    ----------\n    data : a torch_geometric.data object\n\n    Returns\n    -------\n    pred : float\n\n    \"\"\"\n\n    def __init__(self, aggr_type=[], p=[], bc_dpos=[]):\n        super(SignalingNetwork, self).__init__(aggr=aggr_type)\n\n        self.p = p\n        self.bc_dpos = bc_dpos\n\n    def forward(self, data=[], return_all=False):\n        x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr\n        edge_index, _ = pyg_utils.remove_self_loops(edge_index)\n        particle_type = x[:, 5].long()\n        parameters = self.p[particle_type]\n        b = parameters[:, 0:1]\n        c = parameters[:, 1:2]\n\n        u = x[:, 6:7]\n\n        msg = self.propagate(edge_index, u=u, edge_attr=edge_attr)\n\n        du = -b * u + c * torch.tanh(u) + msg\n\n        if return_all:\n            return du, -b * u + c * torch.tanh(u), msg\n        else:\n            return du\n\n    def message(self, u_j, edge_attr):\n\n        self.activation = torch.tanh(u_j)\n        self.u_j = u_j\n\n        return edge_attr[:, None] * torch.tanh(u_j)\n\n\ndef bc_pos(x):\n    return torch.remainder(x, 1.0)\n\n\ndef bc_dpos(x):\n    return torch.remainder(x - 0.5, 1.0) - 0.5\n```\n:::\n\n\nThe data is generated with the above Pytorch Geometric model.\nIf the simulation is too large, you can decrease n_particles (multiple of 2) and n_nodes in \"signal_N_100_2.yaml\"\n\n::: {#dbf25814 .cell execution_count=4}\n``` {.python .cell-code}\np = torch.squeeze(torch.tensor(config.simulation.params))\nmodel = SignalingNetwork(aggr_type=config.graph_model.aggr_type, p=torch.squeeze(p), bc_dpos=bc_dpos)\n\ngenerate_kwargs = dict(device=device, visualize=True, run_vizualized=0, style='color', alpha=1, erase=True, save=True, step=10)\ntrain_kwargs = dict(device=device, erase=True)\ntest_kwargs = dict(device=device, visualize=True, style='color', verbose=False, best_model='20', run=0, step=1, save_velocity=True)\n\ndata_generate_synaptic(config, model, **generate_kwargs)\n```\n:::\n\n\nFinally, we generate the figures that are shown in Figure 2.\nThe frames of the first six datasets are saved in 'decomp-gnn/paper_experiments/graphs_data/graphs_signal_N_100_2/Fig/'.\n\n\n::: {#0bdf7923 .cell execution_count=6}\n\n::: {.cell-output .cell-output-display}\n![Initial configuration of the simulation. There are 998 nodes. The colors indicate the node scalar values.](create_fig_2_7_files/figure-html/cell-7-output-1.png){width=451 height=451}\n:::\n:::\n\n\n::: {#e08f1293 .cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![Frame 300 out of 1000](create_fig_2_7_files/figure-html/cell-8-output-1.png){width=451 height=451}\n:::\n:::\n\n\n::: {#ed782142 .cell execution_count=8}\n\n::: {.cell-output .cell-output-display}\n![Frame 600 out of 1000](create_fig_2_7_files/figure-html/cell-9-output-1.png){width=451 height=451}\n:::\n:::\n\n\n::: {#e81ea6a6 .cell execution_count=9}\n\n::: {.cell-output .cell-output-display}\n![Frame 900 out of 1000](create_fig_2_7_files/figure-html/cell-10-output-1.png){width=451 height=451}\n:::\n:::\n\n\n",
    "supporting": [
      "create_fig_2_7_files"
    ],
    "filters": [],
    "includes": {}
  }
}