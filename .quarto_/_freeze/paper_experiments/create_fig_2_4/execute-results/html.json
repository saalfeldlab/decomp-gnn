{
  "hash": "be693492eb2f70e8f842e341dade7ef7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Boids system with 16 different particle types\nauthor: CÃ©dric Allier, Michael Innerberger, Stephan Saalfeld\ncategories:\n  - Particles\nexecute:\n  echo: false\nimage: \"create_fig_2_4_files/figure-html/cell-10-output-1.png\"\n---\n\n\n\n\nThis script creates the fourth column of paper's Figure 2.\nSimulation of boids (https://en.wikipedia.org/wiki/Boids), 1792 particles, 16 types.\n\n\n\nFirst, we load the configuration file and set the device.\n\n::: {#65d4016b .cell execution_count=2}\n``` {.python .cell-code}\nconfig_file = 'boids_16_256'\nconfig = ParticleGraphConfig.from_yaml(f'./config/{config_file}.yaml')\ndevice = set_device(\"auto\")\n```\n:::\n\n\nThe following model is used to simulate the boids system with PyTorch Geometric.\n\n::: {#25841e22 .cell execution_count=3}\n``` {.python .cell-code}\nclass BoidsModel(pyg.nn.MessagePassing):\n    \"\"\"Interaction Network as proposed in this paper:\n    https://proceedings.neurips.cc/paper/2016/hash/3147da8ab4a0437c15ef51a5cc7f2dc4-Abstract.html\"\"\"\n\n    \"\"\"\n    Compute the acceleration of Boids as a function of their relative positions and relative positions.\n    The interaction function is defined by three parameters p = (p1, p2, p3)\n\n    Inputs\n    ----------\n    data : a torch_geometric.data object\n\n    Returns\n    -------\n    pred : float\n        the acceleration of the Boids (dimension 2)\n    \"\"\"\n\n    def __init__(self, aggr_type=[], p=[], bc_dpos=[], dimension=2):\n        super(BoidsModel, self).__init__(aggr=aggr_type)  # \"mean\" aggregation.\n\n        self.p = p\n        self.bc_dpos = bc_dpos\n        self.dimension = dimension\n\n        self.a1 = 0.5E-5\n        self.a2 = 5E-4\n        self.a3 = 1E-8\n        self.a4 = 0.5E-5\n        self.a5 = 1E-8\n\n    def forward(self, data=[], has_field=False):\n        x, edge_index = data.x, data.edge_index\n\n        if has_field:\n            field = x[:,6:7]\n        else:\n            field = torch.ones_like(x[:,0:1])\n\n        edge_index, _ = pyg_utils.remove_self_loops(edge_index)\n        particle_type = to_numpy(x[:, 1 + 2*self.dimension])\n        parameters = self.p[particle_type, :]\n        d_pos = x[:, self.dimension+1:1 + 2*self.dimension].clone().detach()\n        dd_pos = self.propagate(edge_index, pos=x[:, 1:self.dimension+1], parameters=parameters, d_pos=d_pos, field=field)\n\n        return dd_pos\n\n    def message(self, pos_i, pos_j, parameters_i, d_pos_i, d_pos_j, field_j):\n        distance_squared = torch.sum(self.bc_dpos(pos_j - pos_i) ** 2, axis=1)  # distance squared\n\n        cohesion = parameters_i[:,0,None] * self.a1 * self.bc_dpos(pos_j - pos_i)\n        alignment = parameters_i[:,1,None] * self.a2 * self.bc_dpos(d_pos_j - d_pos_i)\n        separation = - parameters_i[:,2,None] * self.a3 * self.bc_dpos(pos_j - pos_i) / distance_squared[:, None]\n\n        return (separation + alignment + cohesion) * field_j\n\n\ndef bc_pos(x):\n    return torch.remainder(x, 1.0)\n\n\ndef bc_dpos(x):\n    return torch.remainder(x - 0.5, 1.0) - 0.5\n```\n:::\n\n\nThe data is generated with the above Pytorch Geometric model.\nNote two datasets are generated, one for training and one for validation.\n\n::: {#53a3411e .cell execution_count=4}\n``` {.python .cell-code}\np = torch.squeeze(torch.tensor(config.simulation.params))\nmodel = BoidsModel(aggr_type=config.graph_model.aggr_type, p=torch.squeeze(p), bc_dpos=bc_dpos, dimension=config.simulation.dimension)\n\ngenerate_kwargs = dict(device=device, visualize=True, run_vizualized=0, style='color', alpha=1, erase=True, save=True, step=10)\ntrain_kwargs = dict(device=device, erase=True)\ntest_kwargs = dict(device=device, visualize=True, style='color', verbose=False, best_model='20', run=0, step=1, save_velocity=True)\n\ndata_generate_particles(config, model, bc_pos, bc_dpos, **generate_kwargs)\n```\n:::\n\n\nFinally, we generate the figures that are shown in Figure 2.\nAll frames are saved in 'decomp-gnn/paper_experiments/graphs_data/graphs_boids_16_256/Fig/'.\n\n\n::: {#dfb379c9 .cell execution_count=6}\n\n::: {.cell-output .cell-output-display}\n![Initial configuration of the simulation. There are 1792 boids. The colors indicate different types.](create_fig_2_4_files/figure-html/cell-7-output-1.png){width=470 height=470}\n:::\n:::\n\n\n::: {#915a8d36 .cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![Frame 2500 out of 8000](create_fig_2_4_files/figure-html/cell-8-output-1.png){width=470 height=470}\n:::\n:::\n\n\n::: {#d0695c98 .cell execution_count=8}\n\n::: {.cell-output .cell-output-display}\n![Frame 5000 out of 8000](create_fig_2_4_files/figure-html/cell-9-output-1.png){width=470 height=470}\n:::\n:::\n\n\n::: {#471c879b .cell execution_count=9}\n\n::: {.cell-output .cell-output-display}\n![Frame 7500 out of 8000](create_fig_2_4_files/figure-html/cell-10-output-1.png){width=470 height=470}\n:::\n:::\n\n\n",
    "supporting": [
      "create_fig_2_4_files"
    ],
    "filters": [],
    "includes": {}
  }
}