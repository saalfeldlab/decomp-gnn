{
  "hash": "f889aadc09d705a3b929b74fb8025575",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Attraction-repulsion system with 3 particle types\nauthor: CÃ©dric Allier, Michael Innerberger, Stephan Saalfeld\ncategories:\n  - Particles\nexecute:\n  echo: false\nimage: \"create_fig_2_1_files/figure-html/cell-10-output-1.png\"\n---\n\n\n\n\nThis script creates the first column of paper's Figure 2.\nSimulation of an attraction-repulsion system, 4,800 particles, 3 particle types.\n\n\n\nFirst, we load the configuration file and set the device.\n\n::: {#a5edf926 .cell execution_count=2}\n``` {.python .cell-code}\nconfig_file = 'arbitrary_3'\nconfig = ParticleGraphConfig.from_yaml(f'./config/{config_file}.yaml')\ndevice = set_device(\"auto\")\n```\n:::\n\n\nThe following model is used to simulate the attraction-repulsion system with PyTorch Geometric.\n\n::: {#1084577c .cell execution_count=3}\n``` {.python .cell-code}\nclass AttractionRepulsionModel(pyg.nn.MessagePassing):\n    \"\"\"\n    Compute the speed of particles as a function of their relative position according to an attraction-repulsion law.\n    The latter is defined by four parameters p = (p1, p2, p3, p4) and a parameter sigma.\n\n    See https://github.com/gpeyre/numerical-tours/blob/master/python/ml_10_particle_system.ipynb\n    \"\"\"\n\n    def __init__(self, p, sigma, bc_dpos, dimension=2):\n        super(AttractionRepulsionModel, self).__init__(aggr='mean')\n\n        self.p = p\n        self.sigma = sigma\n        self.bc_dpos = bc_dpos\n        self.dimension = dimension\n\n    def forward(self, data: Data):\n        x, edge_index = data.x, data.edge_index\n\n        edge_index, _ = pyg_utils.remove_self_loops(edge_index)\n        particle_type = to_numpy(x[:, 1 + 2 * self.dimension])\n        parameters = self.p[particle_type,:]\n        d_pos = self.propagate(edge_index, pos=x[:, 1:self.dimension + 1], parameters=parameters)\n        return d_pos\n\n\n    def message(self, pos_i, pos_j, parameters_i):\n\n        relative_position = self.bc_dpos(pos_j - pos_i)\n        distance_squared = torch.sum(relative_position ** 2, dim=1)  # squared distance\n        f = (parameters_i[:, 0] * torch.exp(-distance_squared ** parameters_i[:, 1] / (2 * self.sigma ** 2))\n             - parameters_i[:, 2] * torch.exp(-distance_squared ** parameters_i[:, 3] / (2 * self.sigma ** 2)))\n        velocity = f[:, None] * relative_position\n\n        return velocity\n\n\ndef bc_pos(x):\n    return torch.remainder(x, 1.0)\n\n\ndef bc_dpos(x):\n    return torch.remainder(x - 0.5, 1.0) - 0.5\n```\n:::\n\n\nThe data is generated with the above Pytorch Geometric model.\nNote two datasets are generated, one for training and one for validation.\nIf the simulation is too large, you can decrease n_particles (multiple of 3) in \"arbitrary_3.yaml\".\n\n::: {#aef811d4 .cell execution_count=4}\n``` {.python .cell-code}\np = torch.squeeze(torch.tensor(config.simulation.params))\nsigma = config.simulation.sigma\nmodel = AttractionRepulsionModel(\n    p=p,\n    sigma=sigma,\n    bc_dpos=bc_dpos,\n    dimension=config.simulation.dimension\n)\n\ngenerate_kwargs = dict(device=device, visualize=True, run_vizualized=0, style='color', alpha=1, erase=True, save=True, step=10)\ntrain_kwargs = dict(device=device, erase=True)\ntest_kwargs = dict(device=device, visualize=True, style='color', verbose=False, best_model='20', run=0, step=1, save_velocity=True)\n\ndata_generate_particles(config, model, bc_pos, bc_dpos, **generate_kwargs)\n```\n:::\n\n\nFinally, we generate the figures that are shown in Figure 2.\nAll frames are saved in 'decomp-gnn/paper_experiments/graphs_data/arbitrary_3/Fig/'.\n\n\n::: {#6a890ffc .cell execution_count=6}\n\n::: {.cell-output .cell-output-display}\n![Initial configuration of the simulation. There are 4800 particles. The orange, blue, and green particles represent the three different particle types.](create_fig_2_1_files/figure-html/cell-7-output-1.png){width=470 height=470}\n:::\n:::\n\n\n::: {#1016212f .cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![Frame 80 out 250](create_fig_2_1_files/figure-html/cell-8-output-1.png){width=470 height=470}\n:::\n:::\n\n\n::: {#6e311e84 .cell execution_count=8}\n\n::: {.cell-output .cell-output-display}\n![Frame 160 out 250](create_fig_2_1_files/figure-html/cell-9-output-1.png){width=470 height=470}\n:::\n:::\n\n\n::: {#9df8707f .cell execution_count=9}\n\n::: {.cell-output .cell-output-display}\n![Frame 240 out 250](create_fig_2_1_files/figure-html/cell-10-output-1.png){width=470 height=470}\n:::\n:::\n\n\n",
    "supporting": [
      "create_fig_2_1_files"
    ],
    "filters": [],
    "includes": {}
  }
}