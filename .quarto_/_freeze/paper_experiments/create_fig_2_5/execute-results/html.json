{
  "hash": "c4444d01a3981dc59b52155040d4cb12",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Wave propagation with different diffusion coefficients\nauthor: CÃ©dric Allier, Michael Innerberger, Stephan Saalfeld\ncategories:\n  - Particles\nexecute:\n  echo: false\nimage: \"create_fig_2_5_files/figure-html/cell-10-output-1.png\"\n---\n\n\n\n\nThis script creates the fifth column of paper's Figure 2.\nSimulation of wave-propagation over a mesh of 1E4 nodes with\nvariable propagation-coefficients.\n\n\n\nFirst, we load the configuration file and set the device.\n\n::: {#226e8543 .cell execution_count=2}\n``` {.python .cell-code}\nconfig_file = 'wave_slit'\nconfig = ParticleGraphConfig.from_yaml(f'./config/{config_file}.yaml')\ndevice = set_device(\"auto\")\n```\n:::\n\n\nThe following model is used to simulate the wave propagation with PyTorch Geometric.\n\n::: {#1320e0ba .cell execution_count=3}\n``` {.python .cell-code}\nclass WaveModel(pyg.nn.MessagePassing):\n    \"\"\"Interaction Network as proposed in this paper:\n    https://proceedings.neurips.cc/paper/2016/hash/3147da8ab4a0437c15ef51a5cc7f2dc4-Abstract.html\"\"\"\n\n    \"\"\"\n    Compute the Laplacian of a scalar field.\n\n    Inputs\n    ----------\n    data : a torch_geometric.data object\n    note the Laplacian coeeficients are in data.edge_attr\n\n    Returns\n    -------\n    laplacian : float\n        the Laplacian\n    \"\"\"\n\n    def __init__(self, aggr_type=[], beta=[], bc_dpos=[], coeff=[]):\n        super(WaveModel, self).__init__(aggr='add')  # \"mean\" aggregation.\n\n        self.beta = beta\n        self.bc_dpos = bc_dpos\n        self.coeff = coeff\n\n    def forward(self, data):\n        x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr\n\n        c = self.coeff\n        u = x[:, 6:7]\n\n        laplacian_u = self.propagate(edge_index, u=u, edge_attr=edge_attr)\n        dd_u = self.beta * c * laplacian_u\n\n        self.laplacian_u = laplacian_u\n\n        return dd_u\n\n    def message(self, u_j, edge_attr):\n        L = edge_attr[:,None] * u_j\n\n        return L\n\ndef bc_pos(x):\n    return torch.remainder(x, 1.0)\n\ndef bc_dpos(x):\n    return torch.remainder(x - 0.5, 1.0) - 0.5\n```\n:::\n\n\nThe data is generated with the above Pytorch Geometric model.\nNote two datasets are generated, one for training and one for validation.\nIf the simulation is too large, you can decrease n_particles (multiple of 5) and n_nodes in \"wave_slit.yaml\"\n\n::: {#d51bfe4b .cell execution_count=4}\n``` {.python .cell-code}\nmodel = WaveModel(aggr_type=config.graph_model.aggr_type, beta=config.simulation.beta)\n\ngenerate_kwargs = dict(device=device, visualize=True, run_vizualized=0, style='color', erase=False, save=True, step=20)\ntrain_kwargs = dict(device=device, erase=True)\ntest_kwargs = dict(device=device, visualize=True, style='color', verbose=False, best_model='20', run=0, step=1, save_velocity=True)\n\ndata_generate_mesh(config, model , **generate_kwargs)\n```\n:::\n\n\nFinally, we generate the figures that are shown in Figure 2.\nAll frames are saved in 'decomp-gnn/paper_experiments/graphs_data/graphs_wave_slit/Fig/'.\n\n\n::: {#da23946c .cell execution_count=6}\n\n::: {.cell-output .cell-output-display}\n![Initial configuration of the simulation. There are 1E4 nodes. The colors indicate the node scalar values.](create_fig_2_5_files/figure-html/cell-7-output-1.png){width=451 height=451}\n:::\n:::\n\n\n::: {#52680bf4 .cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![Frame 2500 out of 8000](create_fig_2_5_files/figure-html/cell-8-output-1.png){width=451 height=451}\n:::\n:::\n\n\n::: {#54345d73 .cell execution_count=8}\n\n::: {.cell-output .cell-output-display}\n![Frame 5000 out of 8000](create_fig_2_5_files/figure-html/cell-9-output-1.png){width=451 height=451}\n:::\n:::\n\n\n::: {#1a37bad8 .cell execution_count=9}\n\n::: {.cell-output .cell-output-display}\n![Frame 7500 out of 8000](create_fig_2_5_files/figure-html/cell-10-output-1.png){width=451 height=451}\n:::\n:::\n\n\n",
    "supporting": [
      "create_fig_2_5_files"
    ],
    "filters": [],
    "includes": {}
  }
}