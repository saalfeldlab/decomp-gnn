{
  "hash": "e60d3559072c2377417401a935916885",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Reaction-diffusion propagation with different diffusion coefficients\nauthor: CÃ©dric Allier, Michael Innerberger, Stephan Saalfeld\ncategories:\n  - Particles\nexecute:\n  echo: false\nimage: \"create_fig_2_6_files/figure-html/cell-10-output-1.png\"\n---\n\n\n\n\nThis script creates the sixth column of paper's Figure 2.\nSimulation of reaction-diffusion over a mesh of 1E4 nodes with\nvariable propagation-coefficients.\n\n\n\nFirst, we load the configuration file and set the device.\n\n::: {#8ab86e62 .cell execution_count=2}\n``` {.python .cell-code}\nconfig_file = 'RD_RPS'\nconfig = ParticleGraphConfig.from_yaml(f'./config/{config_file}.yaml')\ndevice = set_device(\"auto\")\n```\n:::\n\n\nThe following model is used to simulate the reaction_diffusion propagation with PyTorch Geometric.\n\n::: {#93397e59 .cell execution_count=3}\n``` {.python .cell-code}\nclass RDModel(pyg.nn.MessagePassing):\n    \"\"\"Interaction Network as proposed in this paper:\n    https://proceedings.neurips.cc/paper/2016/hash/3147da8ab4a0437c15ef51a5cc7f2dc4-Abstract.html\"\"\"\n\n    \"\"\"\n    Compute the reaction diffusion according to the rock paper scissor model.\n\n    Inputs\n    ----------\n    data : a torch_geometric.data object\n    Note the Laplacian coeeficients are in data.edge_attr\n\n    Returns\n    -------\n    increment : float\n        the first derivative of three scalar fields u, v and w\n\n    \"\"\"\n\n    def __init__(self, aggr_type=[], bc_dpos=[], coeff = []):\n        super(RDModel, self).__init__(aggr='add')  # \"mean\" aggregation.\n\n        self.bc_dpos = bc_dpos\n        self.coeff = coeff\n        self.a = 0.6\n\n    def forward(self, data):\n        x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr\n\n        c = self.coeff\n\n        uvw = data.x[:, 6:9]\n        laplace_uvw = c * self.propagate(data.edge_index, uvw=uvw, discrete_laplacian=data.edge_attr)\n        p = torch.sum(uvw, axis=1)\n\n        d_uvw = laplace_uvw + uvw * (1 - p[:, None] - self.a * uvw[:, [1, 2, 0]])\n        # This is equivalent to the nonlinear reaction diffusion equation:\n        #   du = c * laplace_u + u * (1 - p - a * v)\n        #   dv = c * laplace_v + v * (1 - p - a * w)\n        #   dw = c * laplace_w + w * (1 - p - a * u)\n\n        return d_uvw\n\n    def message(self, uvw_j, discrete_laplacian):\n        return discrete_laplacian[:, None] * uvw_j\n\ndef bc_pos(x):\n    return torch.remainder(x, 1.0)\n\n\ndef bc_dpos(x):\n    return torch.remainder(x - 0.5, 1.0) - 0.5\n```\n:::\n\n\nThe data is generated with the above Pytorch Geometric model.\nNote two datasets are generated, one for training and one for validation.\nIf the simulation is too large, you can decrease n_particles (multiple of 5) and n_nodes in \"RD_RPS.yaml\"\n\n::: {#e7d6a21a .cell execution_count=4}\n``` {.python .cell-code}\nmodel = RDModel(aggr_type=config.graph_model.aggr_type, bc_dpos=bc_dpos)\n\ngenerate_kwargs = dict(device=device, visualize=True, run_vizualized=0, style='color', erase=False, save=True, step=10)\ntrain_kwargs = dict(device=device, erase=True)\ntest_kwargs = dict(device=device, visualize=True, style='color', verbose=False, best_model='20', run=0, step=1, save_velocity=True)\n\ndata_generate_mesh(config, model , **generate_kwargs)\n```\n:::\n\n\nFinally, we generate the figures that are shown in Figure 2.\nAll frames are saved in 'decomp-gnn/paper_experiments/graphs_data/graphs_RD_RPS/Fig/'.\n\n\n::: {#fd3bca84 .cell execution_count=6}\n\n::: {.cell-output .cell-output-display}\n![Initial configuration of the simulation. There are 1E4 nodes. The colors indicate the node vector values.](create_fig_2_6_files/figure-html/cell-7-output-1.png){width=451 height=451}\n:::\n:::\n\n\n::: {#4eb115b5 .cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![Frame 1250 out of 4000](create_fig_2_6_files/figure-html/cell-8-output-1.png){width=451 height=451}\n:::\n:::\n\n\n::: {#c475cd01 .cell execution_count=8}\n\n::: {.cell-output .cell-output-display}\n![Frame 2500 out of 4000](create_fig_2_6_files/figure-html/cell-9-output-1.png){width=451 height=451}\n:::\n:::\n\n\n::: {#beeb67dc .cell execution_count=9}\n\n::: {.cell-output .cell-output-display}\n![Frame 3750 out of 4000](create_fig_2_6_files/figure-html/cell-10-output-1.png){width=451 height=451}\n:::\n:::\n\n\n",
    "supporting": [
      "create_fig_2_6_files"
    ],
    "filters": [],
    "includes": {}
  }
}