{"title":"Wave propagation with different diffusion coefficients","markdown":{"yaml":{"title":"Wave propagation with different diffusion coefficients","author":"CÃ©dric Allier, Michael Innerberger, Stephan Saalfeld","categories":["Particles"],"execute":{"echo":false},"image":"create_fig_2_5_files/figure-html/cell-10-output-1.png"},"containsRefs":false,"markdown":"\n\nThis script creates the fifth column of paper's Figure 2.\nSimulation of wave-propagation over a mesh of 1E4 nodes with\nvariable propagation-coefficients.\n\n```{python}\n#| output: false\nimport os\n\nimport umap\nimport torch\nimport torch_geometric as pyg\nimport torch_geometric.utils as pyg_utils\nfrom torch_geometric.data import Data\n\nfrom ParticleGraph.config import ParticleGraphConfig\nfrom ParticleGraph.generators import data_generate_mesh\nfrom ParticleGraph.models import data_train, data_test\nfrom ParticleGraph.plotting import get_figures, load_and_display\nfrom ParticleGraph.utils import set_device, to_numpy\nfrom tifffile import imread\nimport numpy as np\n```\n\nFirst, we load the configuration file and set the device.\n\n```{python}\n#| echo: true\n#| output: false\nconfig_file = 'wave_slit'\nconfig = ParticleGraphConfig.from_yaml(f'./config/{config_file}.yaml')\ndevice = set_device(\"auto\")\n```\n\nThe following model is used to simulate the wave propagation with PyTorch Geometric.\n\n\n```{python}\n#| echo: true\n\n\nclass WaveModel(pyg.nn.MessagePassing):\n    \"\"\"Interaction Network as proposed in this paper:\n    https://proceedings.neurips.cc/paper/2016/hash/3147da8ab4a0437c15ef51a5cc7f2dc4-Abstract.html\"\"\"\n\n    \"\"\"\n    Compute the Laplacian of a scalar field.\n\n    Inputs\n    ----------\n    data : a torch_geometric.data object\n    note the Laplacian coeeficients are in data.edge_attr\n\n    Returns\n    -------\n    laplacian : float\n        the Laplacian\n    \"\"\"\n\n    def __init__(self, aggr_type=[], beta=[], bc_dpos=[], coeff=[]):\n        super(WaveModel, self).__init__(aggr='add')  # \"mean\" aggregation.\n\n        self.beta = beta\n        self.bc_dpos = bc_dpos\n        self.coeff = coeff\n\n    def forward(self, data):\n        x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr\n\n        c = self.coeff\n        u = x[:, 6:7]\n\n        laplacian_u = self.propagate(edge_index, u=u, edge_attr=edge_attr)\n        dd_u = self.beta * c * laplacian_u\n\n        self.laplacian_u = laplacian_u\n\n        return dd_u\n\n    def message(self, u_j, edge_attr):\n        L = edge_attr[:,None] * u_j\n\n        return L\n\ndef bc_pos(x):\n    return torch.remainder(x, 1.0)\n\ndef bc_dpos(x):\n    return torch.remainder(x - 0.5, 1.0) - 0.5\n```\n\nThe data is generated with the above Pytorch Geometric model.\nNote two datasets are generated, one for training and one for validation.\nIf the simulation is too large, you can decrease n_particles (multiple of 5) and n_nodes in \"wave_slit.yaml\"\n\n\n```{python}\n#| echo: true\n#| output: false\n\nmodel = WaveModel(aggr_type=config.graph_model.aggr_type, beta=config.simulation.beta)\n\ngenerate_kwargs = dict(device=device, visualize=True, run_vizualized=0, style='color', erase=False, save=True, step=20)\ntrain_kwargs = dict(device=device, erase=True)\ntest_kwargs = dict(device=device, visualize=True, style='color', verbose=False, best_model='20', run=0, step=1, save_velocity=True)\n\ndata_generate_mesh(config, model , **generate_kwargs)\n```\n\nFinally, we generate the figures that are shown in Figure 2.\nAll frames are saved in 'decomp-gnn/paper_experiments/graphs_data/graphs_wave_slit/Fig/'.\n\n```{python}\n#| echo: true\n#| output: false\n```\n\n```{python}\n#| fig-cap: \"Initial configuration of the simulation. There are 1E4 nodes. The colors indicate the node scalar values.\"\nload_and_display('graphs_data/graphs_wave_slit/Fig/Fig_0_0.tif')\n```\n\n```{python}\n#| fig-cap: \"Frame 2500 out of 8000\"\nload_and_display('graphs_data/graphs_wave_slit/Fig/Fig_0_2500.tif')\n```\n\n```{python}\n#| fig-cap: \"Frame 5000 out of 8000\"\nload_and_display('graphs_data/graphs_wave_slit/Fig/Fig_0_5000.tif')\n```\n\n```{python}\n#| fig-cap: \"Frame 7500 out of 8000\"\nload_and_display('graphs_data/graphs_wave_slit/Fig/Fig_0_7500.tif')\n```\n\n","srcMarkdownNoYaml":"\n\nThis script creates the fifth column of paper's Figure 2.\nSimulation of wave-propagation over a mesh of 1E4 nodes with\nvariable propagation-coefficients.\n\n```{python}\n#| output: false\nimport os\n\nimport umap\nimport torch\nimport torch_geometric as pyg\nimport torch_geometric.utils as pyg_utils\nfrom torch_geometric.data import Data\n\nfrom ParticleGraph.config import ParticleGraphConfig\nfrom ParticleGraph.generators import data_generate_mesh\nfrom ParticleGraph.models import data_train, data_test\nfrom ParticleGraph.plotting import get_figures, load_and_display\nfrom ParticleGraph.utils import set_device, to_numpy\nfrom tifffile import imread\nimport numpy as np\n```\n\nFirst, we load the configuration file and set the device.\n\n```{python}\n#| echo: true\n#| output: false\nconfig_file = 'wave_slit'\nconfig = ParticleGraphConfig.from_yaml(f'./config/{config_file}.yaml')\ndevice = set_device(\"auto\")\n```\n\nThe following model is used to simulate the wave propagation with PyTorch Geometric.\n\n\n```{python}\n#| echo: true\n\n\nclass WaveModel(pyg.nn.MessagePassing):\n    \"\"\"Interaction Network as proposed in this paper:\n    https://proceedings.neurips.cc/paper/2016/hash/3147da8ab4a0437c15ef51a5cc7f2dc4-Abstract.html\"\"\"\n\n    \"\"\"\n    Compute the Laplacian of a scalar field.\n\n    Inputs\n    ----------\n    data : a torch_geometric.data object\n    note the Laplacian coeeficients are in data.edge_attr\n\n    Returns\n    -------\n    laplacian : float\n        the Laplacian\n    \"\"\"\n\n    def __init__(self, aggr_type=[], beta=[], bc_dpos=[], coeff=[]):\n        super(WaveModel, self).__init__(aggr='add')  # \"mean\" aggregation.\n\n        self.beta = beta\n        self.bc_dpos = bc_dpos\n        self.coeff = coeff\n\n    def forward(self, data):\n        x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr\n\n        c = self.coeff\n        u = x[:, 6:7]\n\n        laplacian_u = self.propagate(edge_index, u=u, edge_attr=edge_attr)\n        dd_u = self.beta * c * laplacian_u\n\n        self.laplacian_u = laplacian_u\n\n        return dd_u\n\n    def message(self, u_j, edge_attr):\n        L = edge_attr[:,None] * u_j\n\n        return L\n\ndef bc_pos(x):\n    return torch.remainder(x, 1.0)\n\ndef bc_dpos(x):\n    return torch.remainder(x - 0.5, 1.0) - 0.5\n```\n\nThe data is generated with the above Pytorch Geometric model.\nNote two datasets are generated, one for training and one for validation.\nIf the simulation is too large, you can decrease n_particles (multiple of 5) and n_nodes in \"wave_slit.yaml\"\n\n\n```{python}\n#| echo: true\n#| output: false\n\nmodel = WaveModel(aggr_type=config.graph_model.aggr_type, beta=config.simulation.beta)\n\ngenerate_kwargs = dict(device=device, visualize=True, run_vizualized=0, style='color', erase=False, save=True, step=20)\ntrain_kwargs = dict(device=device, erase=True)\ntest_kwargs = dict(device=device, visualize=True, style='color', verbose=False, best_model='20', run=0, step=1, save_velocity=True)\n\ndata_generate_mesh(config, model , **generate_kwargs)\n```\n\nFinally, we generate the figures that are shown in Figure 2.\nAll frames are saved in 'decomp-gnn/paper_experiments/graphs_data/graphs_wave_slit/Fig/'.\n\n```{python}\n#| echo: true\n#| output: false\n```\n\n```{python}\n#| fig-cap: \"Initial configuration of the simulation. There are 1E4 nodes. The colors indicate the node scalar values.\"\nload_and_display('graphs_data/graphs_wave_slit/Fig/Fig_0_0.tif')\n```\n\n```{python}\n#| fig-cap: \"Frame 2500 out of 8000\"\nload_and_display('graphs_data/graphs_wave_slit/Fig/Fig_0_2500.tif')\n```\n\n```{python}\n#| fig-cap: \"Frame 5000 out of 8000\"\nload_and_display('graphs_data/graphs_wave_slit/Fig/Fig_0_5000.tif')\n```\n\n```{python}\n#| fig-cap: \"Frame 7500 out of 8000\"\nload_and_display('graphs_data/graphs_wave_slit/Fig/Fig_0_7500.tif')\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"create_fig_2_5.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.54","theme":{"light":"flatly","dark":"darkly"},"title":"Wave propagation with different diffusion coefficients","author":"CÃ©dric Allier, Michael Innerberger, Stephan Saalfeld","categories":["Particles"],"image":"create_fig_2_5_files/figure-html/cell-10-output-1.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}